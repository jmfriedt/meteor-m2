% 12h to decode the whole extrait.s file (11170164 bytes)

% cf medet :
% check rotate_iq in correlator.pas
pkg load communications
pkg load signal

close all
clear all
f=fopen("extrait.s");
% d=fread(f,inf,'int8'); % 4e5
d=fread(f,5e5,'int8'); % <- to illustrate QPSK
fclose(f);
%d=d-mean(d);

%if (1==0)
  mot=0x1ACFFC1D;          % before Viterbi ...
  mot=[0xfc 0xa2 0xb6 0x3d 0xb0 0x0d 0x97 0x94]
  mot=[1 1 1 1 1 1 0 0 ... %  fc
       1 0 1 0 0 0 1 0 ... %  a2
       1 0 1 1 0 1 1 0 ... %  b6
       0 0 1 1 1 1 0 1 ... %  3d
       1 0 1 1 0 0 0 0 ... %  b0
       0 0 0 0 1 1 0 1 ... %  0d
       1 0 0 1 0 1 1 1 ... %  97
       1 0 0 1 0 1 0 0 ... %  94
  ];
  mot=mot-mean(mot); x=xcorr(mot,d); %xx=reshape(x(1:1024*1024),1024,1024);
  subplot(411);plot(abs(x(1:end/2)));ylim([-1 2000]);
  % 11 -> 01 ; 10 -> 11 ; 00 -> 10 ; 01 -> 00
  mot=[0 1 0 1 0 1 1 0 1 1 1 1 1 0 1 1 1 1 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 1 0 1 1 0 1 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 0 ];
  mot=mot-mean(mot); x=xcorr(mot,d); %xx=reshape(x(1:1024*1024),1024,1024);
  subplot(412);plot(abs(x(1:end/2)));ylim([-1 2000]);
  % 11 -> 11 ; 00 -> 00 ; 10 -> 01 ; 01 -> 10
  mot=[1 1 1 1 1 1 0 0 0 1 0 1 0 0 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 1 0 1 1 0 1 1 0 1 0 0 0 ];
  mot=mot-mean(mot); x=xcorr(mot,d); %xx=reshape(x(1:1024*1024),1024,1024);
  subplot(413);plot(abs(x(1:end/2)));ylim([-1 2000]);
  % 11 -> 01 ; 01 -> 11 ; 00 -> 10 ; 10 -> 00
  mot=[0 1 0 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 0 0 1 0 1 1 1 0 0 0 1 1 0 1 0 1 0 1 0 0 1 1 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 ];
  mot=mot-mean(mot); x=xcorr(mot,d); %xx=reshape(x(1:1024*1024),1024,1024);
  subplot(414);plot(abs(x(1:end/2)));ylim([-1 2000]);  % this word yields the right correlation
%end

% corrects the error in the constellation to find the right synchronization word
d(2:2:end)=-d(2:2:end);
mot=[1 1 1 1 1 1 0 0 ... %  fc
     1 0 1 0 0 0 1 0 ... %  a2
     1 0 1 1 0 1 1 0 ... %  b6
     0 0 1 1 1 1 0 1 ... %  3d
     1 0 1 1 0 0 0 0 ... %  b0
     0 0 0 0 1 1 0 1 ... %  0d
     1 0 0 1 0 1 1 1 ... %  97
     1 0 0 1 0 1 0 0 ... %  94
];
mot=mot-mean(mot); x=xcorr(mot,d); x=x(1:length(mot)+length(d));
% figure;plot(x); % ... we check that we correlate with the right sentence

if (1==1)  % might want to skip the demonstration to decode the whole d dataset
  k=find(abs(x)>1500);k=k(1)
  for m=1:18000
    dd=d(m:m+128-1); % 8 bytes = 64 bits = 128 bits after viterbi
    x=xcorr(mot,dd); x=x(1:length(mot)+length(dd));
    if (max(abs(x))>1400) 
       printf("%d\n",m);
       phrase=(dd<0); % 1 if dd>0, 0 otherwise SWAP BITS (again ?!)
       phrase=phrase';
  %%%%%%%%%%%%%%%%%%%%%
  % https://github.com/Filios92/Viterbi-Decoder/blob/master/viterbi.m
  [decoded,e]=viterbi([1 1 1 1 0 0 1 ; 1 0 1 1 0 1 1 ],phrase,0);
  ddd=(decoded(1:4:end)*8+decoded(2:4:end)*4+decoded(3:4:end)*2+decoded(4:4:end));
  dec2hex(ddd)'
  
  %%%%%%%%%%%%%%%%%%%%%
  
       u=find(ddd==(0x1a));
       if ((!isempty(u))&&(u<length(ddd)) )
          if (ddd(u+1)==(0xcf))
             dec2hex(ddd)'
             dddd=ddd;
          end
       end
       plot(abs(x))
    end 
  end
end
 
return
 
m=4757
dd=d(m:m+24*16384);   % 8 bytes = 64 bits = 128 bits after viterbi  -> HERE select the size of decoded !
% dd=d(m:end);        % 8 bytes = 64 bits = 128 bits after viterbi  -> HERE select the size of decoded !
phrase=(dd<0); % 1 if dd>0, 0 otherwise SWAP BITS (again ?!)
phrase=phrase';
% https://github.com/Filios92/Viterbi-Decoder/blob/master/viterbi.m
[decoded,e]=viterbi([1 1 1 1 0 0 1 ; 1 0 1 1 0 1 1 ],phrase,0);
ddd=(decoded(1:4:end)*8+decoded(2:4:end)*4+decoded(3:4:end)*2+decoded(4:4:end));
dec2hex(ddd)'
  

